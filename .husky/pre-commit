#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# 获取当前目录
PROJECT_ROOT="$(dirname "$0")/.."
cd "$PROJECT_ROOT"

# 读取当前版本号
CURRENT_VERSION=$(node -p "require('./package.json').version")
echo "当前版本号: $CURRENT_VERSION"

# 解析版本号并递增 patch 版本
IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
NEW_PATCH=$((patch + 1))
NEW_VERSION="$major.$minor.$NEW_PATCH"
echo "新版本号: $NEW_VERSION"

# 更新 package.json
node -e "
const fs = require('fs');
const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
pkg.version = '$NEW_VERSION';
fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
"

# 更新 src-tauri/tauri.conf.json
if [ -f "src-tauri/tauri.conf.json" ]; then
  node -e "
const fs = require('fs');
const tauriConf = JSON.parse(fs.readFileSync('src-tauri/tauri.conf.json', 'utf8'));
if (tauriConf.version !== undefined) {
  tauriConf.version = '$NEW_VERSION';
  fs.writeFileSync('src-tauri/tauri.conf.json', JSON.stringify(tauriConf, null, 2));
}
"
fi

# 更新 src-tauri/Cargo.toml - 只替换 [package] 部分的版本号
if [ -f "src-tauri/Cargo.toml" ]; then
  # 使用 awk 只替换 [package] 部分的版本号
  awk -v new_version="$NEW_VERSION" '
    /^\[package\]/ { in_package = 1 }
    /^\[/ && !/^\[package\]/ { in_package = 0 }
    in_package && /^version = / { 
      print "version = \"" new_version "\""
      next
    }
    { print }
  ' src-tauri/Cargo.toml > src-tauri/Cargo.toml.tmp && mv src-tauri/Cargo.toml.tmp src-tauri/Cargo.toml
fi

# 更新 Cargo.lock
if [ -d "src-tauri" ]; then
  echo "正在更新 Cargo.lock..."
  cd src-tauri
  cargo check --quiet 2>/dev/null || echo "Cargo.lock 更新失败，请手动运行: cd src-tauri && cargo check"
  cd ..
fi

# 将版本号变动添加到当前提交中
git add package.json src-tauri/tauri.conf.json src-tauri/Cargo.toml src-tauri/Cargo.lock

echo "版本号已自动递增为 $NEW_VERSION 并添加到提交中"
