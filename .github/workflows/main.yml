name: Tauri Cross-Platform Build (npm)

on:
  workflow_dispatch:
  
env:
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  NODE_OPTIONS: "--max-old-space-size=8192"

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: Windows
            shell: pwsh
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: macOS
            shell: bash
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: Linux
            shell: bash

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      # 1. 检出代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 设置Node.js（自动包含npm）
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: 'npm'

      # 3. 验证环境
      - name: Check versions
        shell: ${{ matrix.shell }}
        run: |
          node -v
          npm -v
          rustc --version || echo "Rust not installed yet"

      # 4. 平台特定依赖
      - name: Install system dependencies
        shell: ${{ matrix.shell }}
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update -y
            sudo apt-get install -y \
              libwebkit2gtk-4.1-dev \
              libgtk-3-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              libssl-dev \
              libasound2-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            ulimit -n 8192
            brew update-reset
            brew install create-dmg || true
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install -y llvm --no-progress --force || true
          fi

      # 5. 安装Rust
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          components: rust-src, clippy, rustfmt

      # 6. 缓存优化
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            node_modules
          key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('package-lock.json') }}

      # 7. 安装npm依赖
      - name: Install dependencies
        shell: ${{ matrix.shell }}
        run: |
          npm ci --no-audit --prefer-offline
          npm list --depth=0

      # 8. 构建前端
      - name: Build frontend
        shell: ${{ matrix.shell }}
        run: npm run build

      # 9. 全局安装Tauri CLI
      - name: Install Tauri CLI
        shell: ${{ matrix.shell }}
        run: npm install -g @tauri-apps/cli

      # 10. 构建Tauri（带完整错误处理）
      - name: Build Tauri
        timeout-minutes: 30
        shell: ${{ matrix.shell }}
        env:
          RUST_BACKTRACE: full
        run: |
          echo "=== Starting build ==="
          npm run tauri build -- --target ${{ matrix.target }} --verbose 2>&1 | tee build.log
          echo "=== Build finished with exit code $? ==="
          
          # 收集日志
          find src-tauri/target -name "*.log" -exec cp {} . \; || true
          [ -f build.log ] && tail -n 100 build.log || echo "No build log found"

      # 11. 上传制品
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-Build-${{ github.run_number }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/
            *.log
          retention-days: 7
